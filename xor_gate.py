# -*- coding: utf-8 -*-
"""XOR GATE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IxkmgbHhRf8STFDF7auLj17mJ_sjMiVL
"""

from google.colab import drive
drive.mount('/content/drive')

!git init xor

"""Predicting XOR GATE"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

from tensorflow import keras as kr

"""Mapping I/O"""

input = np.array([
                          [0,0],[0,1],[1,0],[1,1]
], "float32")
output = np.array([
                        [0],[1],[1],[0]
], "float32")

input.shape, output.shape

act = kr.layers.LeakyReLU()

model = kr.models.Sequential([
    kr.layers.Dense(
        input.shape[0],
        input_dim = input.shape[1],
        activation = act 
    ),
    kr.layers.Dense(
        4,
        activation = act 
    ),
    kr.layers.Dense(
        output.shape[1],
        activation = act
    )
])

model.summary()

"""Design ANN Architecture"""

epochs = 100

model.compile(
    loss = kr.losses.MSE,
    optimizer = kr.optimizers.Adam(lr=0.05),
    metrics = ['accuracy']
)

"""Act and Cost Function"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# train_fit = model.fit(
#     input,
#     output,
#     epochs = epochs,
#     verbose = 0,
# )
# print("Average test loss: ", np.average(train_fit.history['loss']))
# print("Average test accuracy: ", np.average(train_fit.history['accuracy']))

"""Predicting"""

idx = 0
target = np.array([
                   input[idx]
])
print("Target: ",target[0])
print("Predicted: ", model.predict(target).round()[0])
print("Desired: ", output[idx])

"""Visualize"""

e = [*range(0, len(train_fit.history['loss']),1)]

plt.plot(
    e,
    train_fit.history['accuracy'],
    label = 'AVG Accuracy ({:0.2f})'.format(np.average(train_fit.history['accuracy']))
)

plt.plot(
    e,
    train_fit.history['loss'],
    label = 'AVG Loss ({:0.2f})'.format(np.average(train_fit.history['loss']))
)

plt.xlabel('Iteration {}'.format(len(e)))
plt.ylabel('Values')
plt.title('Model Accuracy/Loss')
plt.legend(loc=1, prop={'size':10})
plt.gcf().set_dpi(100)
plt.show()